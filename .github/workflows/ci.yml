name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kufa-dev-team/url-shortener

jobs:
  # Job 1: .NET Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore UrlShortener.sln
      
    - name: Build solution
      run: dotnet build UrlShortener.sln --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test UrlShortener.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test and coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-and-coverage-results
        path: '**/TestResults/**/*.xml'

  # Job 2: Docker Build and Push to GHCR
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

        
# Job 3: Security Scan with Trivy
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      packages: read
      security-events: write
      actions: read
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # Use the actual image tag from the previous job
    - name: Get image tag from previous job
      id: image
      run: |
        # Extract the first tag from the multi-line tags output
        FULL_TAG=$(echo "${{ needs.docker-build-push.outputs.image-tag }}" | head -n1)
        echo "full-image=${FULL_TAG}" >> $GITHUB_OUTPUT
        echo "Scanning image: ${FULL_TAG}"
        
    # Verify image exists before scanning
    - name: Verify image exists
      run: |
        echo "Checking if image exists: ${{ steps.image.outputs.full-image }}"
        docker manifest inspect ${{ steps.image.outputs.full-image }}
        
    # Wait a bit for image to be fully available
    - name: Wait for image availability
      run: sleep 30
        
    - name: Run Trivy vulnerability scanner (SARIF)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.image.outputs.full-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        exit-code: '0'
        
    # Debug: Check if SARIF file was created
    - name: Check SARIF file
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ SARIF file created successfully"
          ls -la trivy-results.sarif
          echo "File size: $(du -h trivy-results.sarif | cut -f1)"
        else
          echo "❌ SARIF file not found"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi
        
    # Try to upload to GitHub Security tab (may fail if Advanced Security is not enabled)
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      if: success()
      with:
        sarif_file: 'trivy-results.sarif'
        
    # Alternative: Upload as workflow artifact (always works)
    - name: Upload SARIF results as artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: trivy-sarif-results
        path: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table output)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.image.outputs.full-image }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH,MEDIUM'
                  
    # Generate summary for workflow
    - name: Security scan summary
      if: always()
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image Scanned:** \`${{ steps.image.outputs.full-image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ SARIF report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ SARIF report generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "trivy-report.html" ]; then
          echo "✅ HTML report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ HTML report generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **View Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- Download the \`trivy-scan-results\` artifact from this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "- Open \`trivy-report.html\` in your browser for a detailed vulnerability report" >> $GITHUB_STEP_SUMMARY

        
  # Job 4: Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, security-scan]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Build and Test: ${{ needs.build-and-test.result }}"
        echo "Docker Build Push: ${{ needs.docker-build-push.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" != "success" || 
              "${{ needs.docker-build-push.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Pipeline failed - not ready for deployment"
          exit 1
        else
          echo "✅ All jobs passed - ready for deployment"
        fi
        
    - name: Summary
      if: success()
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "📦 Docker image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "🔒 Security scan completed with no blocking issues"
