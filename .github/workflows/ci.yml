name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kufa-dev-team/url-shortener

jobs:
  # Job 1: .NET Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore UrlShortener.sln
      
    - name: Build solution
      run: dotnet build UrlShortener.sln --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test UrlShortener.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test and coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-and-coverage-results
        path: '**/TestResults/**/*.xml'

  # Job 2: Docker Build and Push to GHCR
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 3: Security Scan with Trivy
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract image tag
      id: image
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.number }}"
        else
          # Correctly get the short 7-character SHA from the full one
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG="${{ github.ref_name }}-${SHORT_SHA}"
          TAG="${TAG//\//-}"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "full-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}" >> $GITHUB_OUTPUT
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.21.0
      with:
        image-ref: ${{ steps.image.outputs.full-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table output)
      uses: aquasecurity/trivy-action@0.21.0
      with:
        image-ref: ${{ steps.image.outputs.full-image }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: 'trivy-results.sarif'

  # Job 4: Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, security-scan]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Build and Test: ${{ needs.build-and-test.result }}"
        echo "Docker Build Push: ${{ needs.docker-build-push.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" != "success" || 
              "${{ needs.docker-build-push.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "‚ùå Pipeline failed - not ready for deployment"
          exit 1
        else
          echo "‚úÖ All jobs passed - ready for deployment"
        fi
        
    - name: Summary
      if: success()
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "üì¶ Docker image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üîí Security scan completed with no blocking issues"
